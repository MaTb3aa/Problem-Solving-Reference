
#### **Overview**
A comprehensive guide to bitwise operators, tricks, and their applications in C++ programming. This repository covers basic to advanced concepts, including code snippets, algorithm explanations, and usage of modern C++ features.

---

#### **Table of Contents**
1. [Introduction](#introduction)
2. [Bitwise Operators](#bitwise-operators)
3. [Shift Operators](#shift-operators)
4. [Common Bitwise Tricks](#common-bitwise-tricks)
5. [Brian Kernighan's Algorithm](#brian-kernighans-algorithm)
6. [Counting Set Bits](#counting-set-bits)
7. [Additional Tricks](#additional-tricks)
8. [C++ Language and Compiler Support](#cpp-language-and-compiler-support)
9. [Preprocessor Macros for Bit Manipulation](#preprocessor-macros-for-bit-manipulation)
10. [References](#references)

---

### **1. Introduction**
Bitwise operators allow direct manipulation of bits in integers, enabling efficient and low-level programming. This repository explains how to use these operators for common tasks and optimizations.

---

### **2. Bitwise Operators**
Details about basic bitwise operators: AND (`&`), OR (`|`), XOR (`^`), and NOT (`~`).

---

### **3. Shift Operators**
Explains right (`>>`) and left (`<<`) shift operators and their applications.

---

### **4. Common Bitwise Tricks**
Covers useful operations like setting, clearing, flipping bits, and checking divisibility by powers of two.

---

### **5. Brian Kernighan's Algorithm**
Demonstrates an efficient method to count set bits in a number.

---

### **6. Counting Set Bits**
Optimized algorithms for counting set bits up to a number.

---

### **7. Additional Tricks**
Includes extra tips like clearing trailing ones, setting the last cleared bit, and extracting the last set bit.

---

### **8. C++ Language and Compiler Support**
Modern C++20 library functions and GCC built-in functions for working with bits.

---

### **9. Preprocessor Macros for Bit Manipulation**
These macros simplify common bitwise operations:

```cpp
#define bitset(byte, nbit)   ((byte) |=  (1 << (nbit)))
#define bitclear(byte, nbit) ((byte) &= ~(1 << (nbit)))
#define bitflip(byte, nbit)  ((byte) ^=  (1 << (nbit)))
#define bitcheck(byte, nbit) ((byte) &   (1 << (nbit)))
```

---

### **10. References**
- [Hacker's Delight](https://www.hackersdelight.org/)
- [GCC Built-in Functions](https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html)

---

Would you like me to create the directory structure, markdown files, and example code snippets for each section in the repository? If yes, let me know your preferred repository name and file structure.



Hereâ€™s how you can structure this as a professional repository on GitHub:

---

### Repository Name: **Bitwise-Operators-and-Tricks**

#### **Overview**
A comprehensive guide to bitwise operators, tricks, and their applications in C++ programming. This repository covers basic to advanced concepts, including code snippets, algorithm explanations, and usage of modern C++ features.




### **1. Introduction**
Bitwise operators allow direct manipulation of bits in integers, enabling efficient and low-level programming. This repository explains how to use these operators for common tasks and optimizations.

---

### **2. Bitwise Operators**

#### **AND (`&`)**
- Compares each bit of two operands. Sets the result bit to `1` if both bits are `1`.

#### **OR (`|`)**
- Sets the result bit to `1` if at least one operand's bit is `1`.

#### **XOR (`^`)**
- Sets the result bit to `1` if the operands' bits are different.

#### **NOT (`~`)**
- Flips each bit of the operand.

---

### **3. Shift Operators**

#### **Right Shift (`>>`)**
- Divides the number by `2^k` (integer division).

#### **Left Shift (`<<`)**
- Multiplies the number by `2^k`.

---

### **4. Common Bitwise Tricks**

#### **Set/Flip/Clear a Bit**
- Set: `n | (1 << x)`
- Flip: `n ^ (1 << x)`
- Clear: `n & ~(1 << x)`

#### **Check if a Bit is Set**
```cpp
bool is_set(unsigned int number, int x) {
    return (number >> x) & 1;
}
```

#### **Divisibility by Power of 2**
```cpp
bool isDivisibleByPowerOf2(int n, int k) {
    int powerOf2 = 1 << k;
    return (n & (powerOf2 - 1)) == 0;
}
```

#### **Check if a Number is a Power of 2**
```cpp
bool isPowerOfTwo(unsigned int n) {
    return n && !(n & (n - 1));
}
```

#### **Clear the Rightmost Set Bit**
```cpp
n = n & (n - 1);
```

---

### **5. Brian Kernighan's Algorithm**
Count the number of set bits in a number:
```cpp
int countSetBits(int n) {
    int count = 0;
    while (n) {
        n = n & (n - 1);
        count++;
    }
    return count;
}
```

---

### **6. Counting Set Bits**

#### Optimized Approach
```cpp
int countSetBits(int n) {
    int count = 0;
    while (n > 0) {
        int x = std::bit_width(n) - 1;
        count += x << (x - 1);
        n -= 1 << x;
        count += n + 1;
    }
    return count;
}
```

---

### **7. Additional Tricks**
- Clear trailing ones: `n & (n + 1)`
- Set the last cleared bit: `n | (n + 1)`
- Extract the last set bit: `n & -n`

---

### **8. C++ Language and Compiler Support**

#### C++20 Standard Library
- `std::has_single_bit`
- `std::bit_ceil` / `std::bit_floor`
- `std::popcount`

#### GCC Built-in Functions
- `__builtin_popcount`
- `__builtin_ffs`
- `__builtin_clz`
- `__builtin_ctz`
- `__builtin_parity`

---

### **9. References**
- [Hacker's Delight](https://www.hackersdelight.org/)
- [GCC Built-in Functions](https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html)

